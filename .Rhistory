average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
if (fitRange(value,perc.ci)){
perc.count <- perc.count + 1
}
if (fitRange(value,tci.ci)){
tci.count <- tci.count + 1
}
if (fitRange(value,bst.ci)){
bst.count <- bst.count + 1
}
if (fitRange(value,average.ci)){
average.count <- average.count + 1
}
}
set.seed(47)
reps <- 500
tci.count <- 0; bst.count <- 0; perc.count <- 0; average.count <- 0;
get75 <- function(x,ind){
quantile(x[ind],0.75)
}
fitRange<-function(num,range){
num >= range[1] & num <= range[2]
}
get75bt <- function(x, d, R2) {
m.bs = quantile(x[d],0.75)
v.bs = var(boot(x[d], get75, R2)$t)
return(c(m.bs, v.bs))
}
for (i in rep(1,reps)){
i
data <- rgamma(147,2,2)
value <- qgamma(0.75,2,2)
#t-ci
boot1 <- boot(data,get75,100)
mean1 <- quantile(data,0.75)
std1 <- sd(boot1$t)
tci.ci <- c(mean1-1.96*std1,mean1+1.96*std1);
#percentile
boot2 <- boot(data,get75,100)
perc.l <- quantile(boot2$t,0.025)
perc.h <- quantile(boot2$t,0.975)
perc.ci <- c(perc.l,perc.h)
#bs-t
boot2 <- boot(data,get75bt,R=100,R2=20)
bst.ci <- c(boot.ci(boot2,type='stud')$stud[4],boot.ci(boot2,type='stud')$stud[5])
#average
average.l <- (tci.ci[1] + perc.ci[1] + bst.ci[1])/3
average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
if (fitRange(value,perc.ci)){
perc.count <- perc.count + 1
}
if (fitRange(value,tci.ci)){
tci.count <- tci.count + 1
}
if (fitRange(value,bst.ci)){
bst.count <- bst.count + 1
}
if (fitRange(value,average.ci)){
average.count <- average.count + 1
}
}
print(1)
set.seed(47)
reps <- 500
tci.count <- 0; bst.count <- 0; perc.count <- 0; average.count <- 0;
get75 <- function(x,ind){
quantile(x[ind],0.75)
}
fitRange<-function(num,range){
num >= range[1] & num <= range[2]
}
get75bt <- function(x, d, R2) {
m.bs = quantile(x[d],0.75)
v.bs = var(boot(x[d], get75, R2)$t)
return(c(m.bs, v.bs))
}
for (i in rep(1,reps)){
print(i)
data <- rgamma(147,2,2)
value <- qgamma(0.75,2,2)
#t-ci
boot1 <- boot(data,get75,100)
mean1 <- quantile(data,0.75)
std1 <- sd(boot1$t)
tci.ci <- c(mean1-1.96*std1,mean1+1.96*std1);
#percentile
boot2 <- boot(data,get75,100)
perc.l <- quantile(boot2$t,0.025)
perc.h <- quantile(boot2$t,0.975)
perc.ci <- c(perc.l,perc.h)
#bs-t
boot2 <- boot(data,get75bt,R=100,R2=20)
bst.ci <- c(boot.ci(boot2,type='stud')$stud[4],boot.ci(boot2,type='stud')$stud[5])
#average
average.l <- (tci.ci[1] + perc.ci[1] + bst.ci[1])/3
average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
if (fitRange(value,perc.ci)){
perc.count <- perc.count + 1
}
if (fitRange(value,tci.ci)){
tci.count <- tci.count + 1
}
if (fitRange(value,bst.ci)){
bst.count <- bst.count + 1
}
if (fitRange(value,average.ci)){
average.count <- average.count + 1
}
}
range(1,3)
range(1:3)
range(1:1:3)
range(1,13)
range(1,1,3)
range(1,3)
seq(1,3)
set.seed(47)
reps <- 100
tci.count <- 0; bst.count <- 0; perc.count <- 0; average.count <- 0;
get75 <- function(x,ind){
quantile(x[ind],0.75)
}
fitRange<-function(num,range){
num >= range[1] & num <= range[2]
}
get75bt <- function(x, d, R2) {
m.bs = quantile(x[d],0.75)
v.bs = var(boot(x[d], get75, R2)$t)
return(c(m.bs, v.bs))
}
for (i in seq(1,reps)){
print(i)
data <- rgamma(147,2,2)
value <- qgamma(0.75,2,2)
#t-ci
boot1 <- boot(data,get75,100)
mean1 <- quantile(data,0.75)
std1 <- sd(boot1$t)
tci.ci <- c(mean1-1.96*std1,mean1+1.96*std1);
#percentile
boot2 <- boot(data,get75,100)
perc.l <- quantile(boot2$t,0.025)
perc.h <- quantile(boot2$t,0.975)
perc.ci <- c(perc.l,perc.h)
#bs-t
boot2 <- boot(data,get75bt,R=100,R2=20)
bst.ci <- c(boot.ci(boot2,type='stud')$stud[4],boot.ci(boot2,type='stud')$stud[5])
#average
average.l <- (tci.ci[1] + perc.ci[1] + bst.ci[1])/3
average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
if (fitRange(value,perc.ci)){
perc.count <- perc.count + 1
}
if (fitRange(value,tci.ci)){
tci.count <- tci.count + 1
}
if (fitRange(value,bst.ci)){
bst.count <- bst.count + 1
}
if (fitRange(value,average.ci)){
average.count <- average.count + 1
}
}
tci.rate <- tci.count/reps
bst.rate <- bst.count/reps
perc.rate <- perc.count/reps
average.rate <- average.count/reps
tci.rate
bst.rate
perc.rate
average.rate
set.seed(47)
reps <- 500
tci.count <- 0; bst.count <- 0; perc.count <- 0; average.count <- 0;
get75 <- function(x,ind){
quantile(x[ind],0.75)
}
fitRange<-function(num,range){
num >= range[1] & num <= range[2]
}
get75bt <- function(x, d, R2) {
m.bs = quantile(x[d],0.75)
v.bs = var(boot(x[d], get75, R2)$t)
return(c(m.bs, v.bs))
}
for (i in seq(1,reps)){
print(i)
data <- rgamma(147,2,2)
value <- qgamma(0.75,2,2)
#t-ci
boot1 <- boot(data,get75,100)
mean1 <- quantile(data,0.75)
std1 <- sd(boot1$t)
tci.ci <- c(mean1-1.96*std1,mean1+1.96*std1);
#percentile
boot2 <- boot(data,get75,100)
perc.l <- quantile(boot2$t,0.025)
perc.h <- quantile(boot2$t,0.975)
perc.ci <- c(perc.l,perc.h)
#bs-t
boot2 <- boot(data,get75bt,R=100,R2=20)
bst.ci <- c(boot.ci(boot2,type='stud')$stud[4],boot.ci(boot2,type='stud')$stud[5])
#average
average.l <- (tci.ci[1] + perc.ci[1] + bst.ci[1])/3
average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
if (fitRange(value,perc.ci)){
perc.count <- perc.count + 1
}
if (fitRange(value,tci.ci)){
tci.count <- tci.count + 1
}
if (fitRange(value,bst.ci)){
bst.count <- bst.count + 1
}
if (fitRange(value,average.ci)){
average.count <- average.count + 1
}
}
tci.rate <- tci.count/reps
bst.rate <- bst.count/reps
perc.rate <- perc.count/reps
average.rate <- average.count/reps
tci.raye
tci.rate
bst.rate
perc.rate
average.rate
View(hiv2)
save.image("~/Untitled.RData")
data <- hiv2$hivRate
#t-ci
boot1 <- boot(data,get75,100)
mean1 <- quantile(data,0.75)
std1 <- sd(boot1$t)
tci.ci <- c(mean1-1.96*std1,mean1+1.96*std1)
#percentile
boot2 <- boot(data,get75,100)
perc.l <- quantile(boot2$t,0.025)
perc.h <- quantile(boot2$t,0.975)
perc.ci <- c(perc.l,perc.h)
#bst
boot3 <- boot(data,get75bt,R=100,R2=20)
bst.ci <- c(boot.ci(boot3,type='stud')$stud[4],boot.ci(boot3,type='stud')$stud[5])
#average
average.l <- (tci.ci[1] + perc.ci[1] + bst.ci[1])/3
average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
average.ci
quantile(0.75,data)
quantile(0.75,hiv$hivRate)
quantile(hiv$hivRate,0.75)
data <- hiv2$hivRate
#t-ci
boot1 <- boot(data,get75,100)
mean1 <- quantile(data,0.75)
std1 <- sd(boot1$t)
tci.ci <- c(mean1-1.96*std1,mean1+1.96*std1)
#percentile
boot2 <- boot(data,get75,100)
perc.l <- quantile(boot2$t,0.025)
perc.h <- quantile(boot2$t,0.975)
perc.ci <- c(perc.l,perc.h)
#bst
boot3 <- boot(data,get75bt,R=100,R2=20)
bst.ci <- c(boot.ci(boot3,type='stud')$stud[4],boot.ci(boot3,type='stud')$stud[5])
#average
average.l <- (tci.ci[1] + perc.ci[1] + bst.ci[1])/3
average.h <- (tci.ci[2] + perc.ci[2] + bst.ci[2])/3
average.ci <- c(average.l,average.h)
average.ci
tci.ci
quantile(hiv3$hivRate,0.75)
quantile(hiv2$hivRate,0.75)
set.seed(47)
require('MASS')
require('ggplot2')
require('randomForest')
train <- sample(1:nrow(Boston), nrow(Boston)/2)
boston.test=Boston[-train,"medv"]
mtry <- seq(5,13,2)
ntree <- seq(1,1000,10)
errors <- c()
for (i in mtry){
print(i)
for (j in ntree){
print(j)
bag.boston <- randomForest(medv~., data=Boston, subset=train, mtry=i, importance=TRUE, ntree=j);
yhat.bag <- predict(bag.boston, newdata=Boston[-train,])
error <- mean(sqrt((yhat.bag-boston.test)^2))
errors <- c(errors,error)
}
}
mtry <- as.factor(c(rep(5,100),rep(7,100),rep(9,100),rep(11,100),rep(13,100)))
ddf <- data.frame(mtry=mtry,ntree=ntree,error=errors)
ggplot(ddf,aes(x=ntree))+geom_line(aes(y=error,color=mtry))
set.seed(47)
require(ISLR)
require(tree)
train <- sample(1:nrow(Carseats),200)
Carseats.train <- Carseats[train,]
Carseats.test <- Carseats[-train,]
tree.carseats <- tree(Sales~.,Carseats.train)
tree.carseats
plot(tree.carseats)
text(tree.carseats)
summary(tree.carseats)
tree.pred <- predict(tree.carseats,Carseats.test)
response <- Carseats.test$Sales
tree.MSE <- mean((response-tree.pred)^2)
tree.MSE
set.seed(47)
cv.carseats <- cv.tree(tree.carseats)
cv.carseats
set.seed(47)
bag.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=10,importance=TRUE,ntree=100)
bag.pred <- predict(bag.carseats,newdata=Carseats.test)
bag.MSE <- mean((response-bag.pred)^2)
bag.MSE
importance(bag.carseats)
set.seed(47)
MSEs <- c()
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=6,importance=TRUE,ntree=100)
MSE <- mean((response-forests.pred)^2)
MSE
for (i in seq(1,10,1)){
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=10,importance=TRUE,ntree=100)
forests.pred <- predict(forests.carseats,newdata=Carseats.test)
MSE <- mean((response-forests.pred)^2)
MSEs <- c(MSEs,MSE)
}
plot(seq(1,10,1),MSEs)
importance(forests.carseats)
set.seed(47)
MSEs <- c()
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=6,importance=TRUE,ntree=100)
MSE <- mean((response-forests.pred)^2)
MSE
i=1
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=10,importance=TRUE,ntree=100)
forests.pred <- predict(forests.carseats,newdata=Carseats.test)
MSE <- mean((response-forests.pred)^2)
set.seed(47)
MSEs <- c()
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=6,importance=TRUE,ntree=100)
MSE <- mean((response-forests.pred)^2)
MSE
for (i in seq(1,10,1)){
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=10,importance=TRUE,ntree=100)
forests.pred <- predict(forests.carseats,newdata=Carseats.test)
MSE <- mean((response-forests.pred)^2)
MSEs <- c(MSEs,MSE)
}
plot(seq(1,10,1),MSEs)
importance(forests.carseats)
set.seed(47)
require('MASS')
require('ggplot2')
require('randomForest')
train <- sample(1:nrow(Boston), nrow(Boston)/2)
boston.test=Boston[-train,"medv"]
mtry <- seq(5,13,2)
ntree <- seq(1,1000,10)
errors <- c()
for (i in mtry){
for (j in ntree){
bag.boston <- randomForest(medv~., data=Boston, subset=train, mtry=i, importance=TRUE, ntree=j);
yhat.bag <- predict(bag.boston, newdata=Boston[-train,])
error <- mean(sqrt((yhat.bag-boston.test)^2))
errors <- c(errors,error)
}
}
set.seed(47)
require('MASS')
require('ggplot2')
require('randomForest')
train <- sample(1:nrow(Boston), nrow(Boston)/2)
boston.test=Boston[-train,"medv"]
mtry <- seq(5,13,2)
ntree <- seq(1,1000,10)
errors <- c()
set.seed(47)
require(ISLR)
require(tree)
train <- sample(1:nrow(Carseats),200)
Carseats.train <- Carseats[train,]
Carseats.test <- Carseats[-train,]
tree.carseats <- tree(Sales~.,Carseats.train)
tree.carseats
plot(tree.carseats)
text(tree.carseats)
summary(tree.carseats)
tree.pred <- predict(tree.carseats,Carseats.test)
response <- Carseats.test$Sales
tree.MSE <- mean((response-tree.pred)^2)
tree.MSE
set.seed(47)
cv.carseats <- cv.tree(tree.carseats)
cv.carseats
set.seed(47)
bag.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=10,importance=TRUE,ntree=100)
bag.pred <- predict(bag.carseats,newdata=Carseats.test)
bag.MSE <- mean((response-bag.pred)^2)
bag.MSE
importance(bag.carseats)
set.seed(47)
MSEs <- c()
for (i in seq(1,10,1)){
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=10,importance=TRUE,ntree=100)
forests.pred <- predict(forests.carseats,newdata=Carseats.test)
MSE <- mean((response-forests.pred)^2)
MSEs <- c(MSEs,MSE)
}
MSEs
plot(seq(1,10,1),MSEs)
importance(forests.carseats)
MSEs
set.seed(47)
MSEs <- c()
for (i in seq(1,10,1)){
forests.carseats <- randomForest(Sales~.,data=Carseats.train,mtry=i,importance=TRUE,ntree=100)
forests.pred <- predict(forests.carseats,newdata=Carseats.test)
MSE <- mean((response-forests.pred)^2)
MSEs <- c(MSEs,MSE)
}
MSEs
plot(seq(1,10,1),MSEs)
importance(forests.carseats)
MSEs
?csv.read
?read.csv
articles <- read.csv('articles.csv')
dir()
setdir
cwd
setwd("~/Desktop/Topic Analysis")
articles <- read.csv('articles.csv')
View(articles)
View(articles)
articles <- articles[,c(1,2,3,7)]
View(articles)
View(articles)
class(articles$content)
class(articles$title)
articles$content <- as.factor(articles.content)
articles$content <- as.factor(articles$content)
articles$content <- as.character(articles$content)
articles$title <- as.character(articles$title)
articles$content <- as.character(articles$content)
articles$title <- as.character(articles$title)
articles$content <- as.character(articles$content)
articles$id <- as.numeric(articles$id)
articles$published_date <- as.Date(articles$published_date,format = "%m/%d/%Y")
articles <- read.csv('articles.csv')
articles <- articles[,c(1,2,3,7)]
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
articles$title <- as.character(articles$title)
articles$content <- as.character(articles$content)
articles$id <- as.numeric(articles$id)
library(lubridate)
articles$published_date <-mdy_hms(as.character(articles$published_date))
library(lubridate)
articles <- read.csv('articles.csv')
articles <- articles[,c(1,2,3,7)]
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
articles$title <- as.character(articles$title)
articles$content <- as.character(articles$content)
articles$id <- as.numeric(articles$id)
articles$published_date <- as.Date(articles$published_date,format = "%Y-%m-%d %H:%M:%S")
articles[1,3]
cleanFun(articles[1,3])
articles <- cbind(articles[,-3], apply(articles[,3],2,cleanFun))
artickes[,3]
articles[,3]
articles <- cbind(articles[,c(1,2,4)], apply(articles[,3],2,cleanFun))
dim(articles[,3])
dim(articles[,"content"])
a=lapply(articles$content,cleanFun)
articles$content=a
articles$content=unlist(articles$content)
View(articles)
write.csv(articles,file="clean_articles.csv",sep=",",col.names=TRUE)
articles <- read.csv('clean_articles.csv')
write.csv(articles,file="clean_articles.csv",row.names=FALSE)
articles <- read.csv('clean_articles.csv')
articles <- articles[,-1]
write.csv(articles,file="clean_articles.csv",row.names=FALSE)
articles <- read.csv('clean_articles.csv')
source("formatData.R")
#read data from raw csv file
articles <- read.csv('articles.csv')
articles <- articles[,c(1,2,3,7)]
#format the data
articles <- formatData(articles)
#get rid of html tag
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
articles$content <- unlist(lapply(articles$content,cleanFun))
articles <- readData('articles.csv')
source('readData.R')
articles <- readData('articles.csv')
install.packages('tm')
myCorpus<-Corpus(VectorSource(articles$content))
